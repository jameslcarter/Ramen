generator client {
  provider        = "prisma-client-js"
  previewFeatures = ["referentialIntegrity"]
}

datasource db {
  provider             = "mysql"
  url                  = env("DATABASE_URL")
  referentialIntegrity = "prisma"
}

model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.Text
  access_token      String? @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.Text
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model User {
  id            String     @id @default(cuid())
  name          String?
  email         String?    @unique
  emailVerified DateTime?
  image         String?
  accounts      Account[]
  sessions      Session[]
  course        String?
  year          Int?
  modules       Module[]
  notebooks     Notebook[]
  tasks         Task[]
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

model Module {
  id        String     @id @default(cuid())
  name      String     @unique
  code      String     @unique
  emoji     String?
  color     String?
  credits   Int        @default(0)
  notebooks Notebook[]
  tasks     Task[]
  User      User?      @relation(fields: [userId], references: [id])
  userId    String?
}

model Notebook {
  id        String   @id @default(cuid())
  title     String
  emoji     String?
  content   String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  Module    Module   @relation(fields: [moduleId], references: [id], onDelete: Cascade)
  moduleId  String
  User      User?    @relation(fields: [userId], references: [id])
  userId    String?
}

model Task {
  id          String   @id @default(cuid())
  todo        String
  dateCreated DateTime @default(now())
  dueDate     DateTime
  Module      Module   @relation(fields: [moduleId], references: [name], onDelete: Cascade)
  moduleId    String
  User        User?    @relation(fields: [userId], references: [id])
  userId      String?
}
