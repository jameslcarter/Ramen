generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider     = "mysql"
  url          = env("DATABASE_URL")
  relationMode = "prisma"
}

model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.Text
  access_token      String? @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.Text
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
  @@index([userId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([userId])
}

model User {
  id            String     @id @default(cuid())
  name          String?
  email         String?    @unique
  emailVerified DateTime?
  image         String?
  accounts      Account[]
  sessions      Session[]
  modules       Module[]
  notebooks     Notebook[]
  tasks         Task[]
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

model Module {
  id          String     @id @default(cuid())
  name        String     @unique
  code        String     @unique
  icon        String
  color       String
  lastVisited DateTime   @default(now())
  credits     Int        @default(0)
  notebooks   Notebook[]
  tasks       Task[]
  User        User       @relation(fields: [userId], references: [id])
  userId      String

  @@index([userId])
}

model Notebook {
  id        String   @id @default(cuid())
  title     String
  icon      String
  content   String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  Module    Module   @relation(fields: [moduleId], references: [id], onDelete: Cascade)
  moduleId  String
  User      User     @relation(fields: [userId], references: [id])
  userId    String

  @@index([userId])
  @@index([moduleId])
}

model Task {
  id          String   @id @default(cuid())
  todo        String
  dateCreated DateTime @default(now())
  dueDate     DateTime
  Module      Module   @relation(fields: [moduleId], references: [name], onDelete: Cascade)
  moduleId    String
  User        User     @relation(fields: [userId], references: [id])
  userId      String

  @@index([userId])
  @@index([moduleId])
}

model WaitingList {
  id        String   @id @default(cuid())
  email     String   @unique
  approved  Boolean  @default(false)
  createdAt DateTime @default(now())
}
